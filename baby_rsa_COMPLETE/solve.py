from Crypto.Util.number import bytes_to_long, long_to_bytes

prime1 = 136024615968159523635783786250754582181896093719141313032735799832918505927278017301137489549350469888340185311738729676572960002703127217056022674970385667919329299946465955028621772987832299192124851603036209014125851666485371564208777518653383566602907583128320606089604374588618770321255924668555601121983
message = 48684494208156703255618741233722206861838131355664330786112688528835847814067658315540404825776373699848403261718882901480241186363243580193823478786754287988223494305382843470035597561321650173604418998861541579786571616898981064942268987612832336970612183009426456609629190519852116119540732928270742888881
e = 65537

# Since n is definitely a prime we can use 2 as the other prime since totient calculation needs to be >0
prime2 = 2


def decrypt(c, p, q):
    N = p * q
    totient = (p-1) * (q-1)
    d = pow(e, -1, totient)
    return pow(c, d, N)

plain = decrypt(message, prime1, prime2)
print(long_to_bytes(plain).decode())

#GOP{h0w_d0_y0u_f33l_ab0ut_3ncrypt10n}
